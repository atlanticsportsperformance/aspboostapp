'use client';

import { useEffect, useState } from 'react';
import { createClient } from '@/lib/supabase/client';
import { useRouter } from 'next/navigation';

export default function DashboardPage() {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState<any>(null);

  useEffect(() => {
    async function loadDashboardData() {
      const supabase = createClient();

      // Get current user
      const { data: { user }, error: userError } = await supabase.auth.getUser();

      if (userError || !user) {
        router.push('/sign-in');
        return;
      }

  // Get today's date for queries
  const today = new Date().toISOString().split('T')[0];
  const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

  console.log('=== DASHBOARD QUERY DEBUG ===');
  console.log('Today:', today);
  console.log('Week ago:', weekAgo);

  // Fetch all data in parallel
  const [
    athleteCountResult,
    todayWorkoutsResult,
    weekCompletedResult,
    athletesWithPlansResult,
    allPlansResult,
    recentActivityResult,
    teamsResult,
    activePlanAssignmentsResult,
    totalWeekCountResult
  ] = await Promise.all([
    // 1. Active athletes count
    supabase
      .from('athletes')
      .select('*', { count: 'exact', head: false })
      .eq('is_active', true),

    // 2. Today's workout instances
    supabase
      .from('workout_instances')
      .select('*')
      .eq('scheduled_date', today)
      .order('scheduled_date', { ascending: true }),

    // 3. Workouts completed this week
    supabase
      .from('workout_instances')
      .select('*', { count: 'exact', head: false })
      .eq('status', 'completed')
      .gte('scheduled_date', weekAgo),

    // 4. All active athletes (simple query)
    supabase
      .from('athletes')
      .select('*')
      .eq('is_active', true)
      .limit(50),

    // 5. All plans (simple query)
    supabase
      .from('plans')
      .select('*')
      .limit(50),

    // 6. Recent activity (set logs) - simple query
    supabase
      .from('set_logs')
      .select('*')
      .order('logged_at', { ascending: false })
      .limit(15),

    // 7. Teams with member counts
    supabase
      .from('teams')
      .select(`
        id,
        name,
        level,
        sport,
        team_members (athlete_id)
      `),

    // 8. Active plan assignments (for counting active plans)
    supabase
      .from('plan_assignments')
      .select('plan_id')
      .eq('is_active', true),

    // 9. Total workouts this week (for completion rate)
    supabase
      .from('workout_instances')
      .select('*', { count: 'exact', head: false })
      .gte('scheduled_date', weekAgo)
  ]);

  // Extract data and errors from results
  const { count: athleteCount, error: athleteError } = athleteCountResult;
  const { data: todayWorkouts, error: todayWorkoutsError } = todayWorkoutsResult;
  const { count: weekCompletedCount, error: weekCompletedError } = weekCompletedResult;
  const { data: athletesWithPlans, error: athletesError } = athletesWithPlansResult;
  const { data: allPlans, error: plansError } = allPlansResult;
  const { data: recentActivity, error: activityError } = recentActivityResult;
  const { data: teams, error: teamsError } = teamsResult;
  const { data: activePlanAssignments, error: planAssignmentsError } = activePlanAssignmentsResult;
  const { count: totalWeekCount, error: totalWeekError } = totalWeekCountResult;

  // Log all results for debugging
  console.log('1. Athletes count:', athleteCount, 'Error:', athleteError);
  console.log('2. Today workouts:', todayWorkouts?.length, 'Error:', todayWorkoutsError);
  console.log('3. Week completed:', weekCompletedCount, 'Error:', weekCompletedError);
  console.log('4. Athletes with plans:', athletesWithPlans?.length, 'Error:', athletesError);
  console.log('5. All plans:', allPlans?.length, 'Error:', plansError);
  console.log('6. Recent activity:', recentActivity?.length, 'Error:', activityError);
  console.log('7. Teams:', teams?.length, 'Error:', teamsError);
  console.log('8. Plan assignments:', activePlanAssignments?.length, 'Error:', planAssignmentsError);
  console.log('9. Total week count:', totalWeekCount, 'Error:', totalWeekError);

  // Log actual data samples
  console.log('Sample athlete data:', athletesWithPlans?.[0]);
  console.log('Sample plan data:', allPlans?.[0]);
  console.log('Sample plan assignment:', activePlanAssignments?.[0]);

  // Calculate metrics
  const totalActiveAthletes = athleteCount || 0;
  const athletesTrainingToday = todayWorkouts ? new Set(todayWorkouts.map((w: any) => w.athlete_id).filter(Boolean)).size : 0;
  const workoutsCompletedWeek = weekCompletedCount || 0;
  const uniqueActivePlans = activePlanAssignments ? new Set(activePlanAssignments.map((pa: any) => pa.plan_id)).size : 0;
  const completionRate = totalWeekCount && totalWeekCount > 0
    ? Math.round((workoutsCompletedWeek / totalWeekCount) * 100)
    : 0;

  console.log('CALCULATED METRICS:');
  console.log('- Total athletes:', totalActiveAthletes);
  console.log('- Training today:', athletesTrainingToday);
  console.log('- Completed this week:', workoutsCompletedWeek);
  console.log('- Unique active plans:', uniqueActivePlans);
  console.log('- Completion rate:', completionRate);

  // Calculate athlete completion rates (mock for now - would need more complex query)
  const athletesWithStats = athletesWithPlans?.map((athlete: any) => {
    // Mock completion rate (in production, calculate from actual workout_instances)
    const mockCompletionRate = Math.floor(Math.random() * 40) + 60; // 60-100%
    let status: 'excellent' | 'on-track' | 'attention' | 'at-risk' = 'excellent';

    if (mockCompletionRate >= 85) status = 'excellent';
    else if (mockCompletionRate >= 70) status = 'on-track';
    else if (mockCompletionRate >= 50) status = 'attention';
    else status = 'at-risk';

    const planAssignments = athlete.plan_assignments as any;
    // Find active plan assignment
    const activePlan = planAssignments && Array.isArray(planAssignments)
      ? planAssignments.find((pa: any) => pa.is_active && pa.plans)
      : null;
    const planName = activePlan?.plans?.name || 'No Active Plan';

    return {
      ...athlete,
      completionRate: mockCompletionRate,
      status,
      planName
    };
  });

  // Calculate team stats
  const teamsWithStats = teams?.map((team: any) => ({
    ...team,
    memberCount: team.team_members?.length || 0,
    avgCompletionRate: Math.floor(Math.random() * 30) + 65 // Mock data
  }));

      // Find athletes needing attention
      const athletesNeedingAttention = athletesWithStats?.filter((a: any) =>
        a.status === 'attention' || a.status === 'at-risk'
      ) || [];

      // Today's missed workouts
      const missedWorkoutsToday = todayWorkouts?.filter((w: any) =>
        w.status === 'pending' && new Date() > new Date(w.scheduled_date)
      ) || [];

      setData({
        totalActiveAthletes,
        athletesTrainingToday,
        workoutsCompletedWeek,
        uniqueActivePlans,
        completionRate,
        athletesWithStats,
        todayWorkouts,
        recentActivity,
        allPlans,
        teamsWithStats,
        athletesNeedingAttention,
        missedWorkoutsToday,
        user
      });
      setLoading(false);
    }

    loadDashboardData();
  }, [router]);

  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-[#0A0A0A]">
        <div className="text-center">
          <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-white/20 border-r-white"></div>
          <p className="mt-4 text-sm text-white/50">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  if (!data) {
    return null;
  }

  const {
    totalActiveAthletes,
    athletesTrainingToday,
    workoutsCompletedWeek,
    uniqueActivePlans,
    completionRate,
    athletesWithStats,
    todayWorkouts,
    recentActivity,
    allPlans,
    teamsWithStats,
    athletesNeedingAttention,
    missedWorkoutsToday,
    user
  } = data;

  return (
    <div className="min-h-screen bg-[#0A0A0A]">
      {/* Background Effects */}
      <div className="fixed inset-0 bg-gradient-to-br from-[#C9A857]/5 via-transparent to-transparent pointer-events-none" />

      <div className="relative">

        {/* Main Content */}
        <main className="mx-auto max-w-[1800px] px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
          {/* Key Metrics */}
          <div className="mb-6 sm:mb-8 grid gap-3 sm:gap-6 grid-cols-2 lg:grid-cols-5">
            {/* Total Athletes */}
            <div className="glass-card-hover shadow-premium rounded-2xl p-4 sm:p-6 border-l-2 border-l-[#C9A857]">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <p className="text-sm font-medium text-white/60">Total Athletes</p>
                  <p className="mt-2 text-3xl font-bold text-white">{totalActiveAthletes}</p>
                  <p className="mt-2 text-xs text-emerald-400">Active members</p>
                </div>
                <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-[#C9A857]/10">
                  <svg className="h-6 w-6 text-[#C9A857]" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                </div>
              </div>
            </div>

            {/* Training Today */}
            <div className="glass-card-hover shadow-premium rounded-2xl p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <p className="text-sm font-medium text-white/60">Training Today</p>
                  <p className="mt-2 text-3xl font-bold text-white">{athletesTrainingToday}</p>
                  <p className="mt-2 text-xs text-blue-400">{todayWorkouts?.length || 0} workouts</p>
                </div>
                <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-blue-500/10">
                  <svg className="h-6 w-6 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
              </div>
            </div>

            {/* Weekly Completed */}
            <div className="glass-card-hover shadow-premium rounded-2xl p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <p className="text-sm font-medium text-white/60">Completed (7d)</p>
                  <p className="mt-2 text-3xl font-bold text-white">{workoutsCompletedWeek}</p>
                  <p className="mt-2 text-xs text-emerald-400">Workouts finished</p>
                </div>
                <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-emerald-500/10">
                  <svg className="h-6 w-6 text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              </div>
            </div>

            {/* Active Plans */}
            <div className="glass-card-hover shadow-premium rounded-2xl p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <p className="text-sm font-medium text-white/60">Active Plans</p>
                  <p className="mt-2 text-3xl font-bold text-white">{uniqueActivePlans}</p>
                  <p className="mt-2 text-xs text-purple-400">In use now</p>
                </div>
                <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-purple-500/10">
                  <svg className="h-6 w-6 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
              </div>
            </div>

            {/* Completion Rate */}
            <div className="glass-card-hover shadow-premium rounded-2xl p-6 border-r-2 border-r-emerald-400">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <p className="text-sm font-medium text-white/60">Completion Rate</p>
                  <p className="mt-2 text-3xl font-bold text-white">{completionRate}%</p>
                  <p className="mt-2 text-xs text-emerald-400">This week</p>
                </div>
                <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-emerald-500/10">
                  <svg className="h-6 w-6 text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                  </svg>
                </div>
              </div>
            </div>
          </div>

          {/* Main Grid */}
          <div className="grid gap-4 sm:gap-6 lg:grid-cols-3">
            {/* Left Column - Athlete Overview */}
            <div className="lg:col-span-2 space-y-4 sm:space-y-6">
              {/* Alerts */}
              {(athletesNeedingAttention.length > 0 || missedWorkoutsToday.length > 0) && (
                <div className="glass-card shadow-premium rounded-2xl p-4 sm:p-6 border-l-4 border-l-red-500">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-2">
                      <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-red-500/20">
                        <svg className="h-4 w-4 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                      </div>
                      <h2 className="text-lg font-semibold text-white">Priority Actions</h2>
                    </div>
                    <span className="rounded-full bg-red-500/10 px-3 py-1 text-xs font-medium text-red-400">
                      {athletesNeedingAttention.length + missedWorkoutsToday.length} items
                    </span>
                  </div>
                  <div className="space-y-2">
                    {athletesNeedingAttention.slice(0, 3).map((athlete: any) => (
                      <div key={athlete.id} className="flex items-center justify-between rounded-lg bg-white/[0.02] p-3 border border-white/[0.05]">
                        <div className="flex items-center gap-3">
                          <div className="h-2 w-2 rounded-full bg-red-400" />
                          <div>
                            <p className="text-sm font-medium text-white">
                              {athlete.first_name} {athlete.last_name}
                            </p>
                            <p className="text-xs text-white/50">
                              Completion rate: {athlete.completionRate}%
                            </p>
                          </div>
                        </div>
                        <button className="rounded-lg bg-white/[0.05] px-3 py-1.5 text-xs font-medium text-white hover:bg-white/[0.08] transition-smooth">
                          Review
                        </button>
                      </div>
                    ))}
                    {missedWorkoutsToday.length > 0 && (
                      <div className="flex items-center justify-between rounded-lg bg-white/[0.02] p-3 border border-white/[0.05]">
                        <div className="flex items-center gap-3">
                          <div className="h-2 w-2 rounded-full bg-yellow-400" />
                          <div>
                            <p className="text-sm font-medium text-white">
                              {missedWorkoutsToday.length} missed workout{missedWorkoutsToday.length > 1 ? 's' : ''} today
                            </p>
                            <p className="text-xs text-white/50">Requires follow-up</p>
                          </div>
                        </div>
                        <button className="rounded-lg bg-white/[0.05] px-3 py-1.5 text-xs font-medium text-white hover:bg-white/[0.08] transition-smooth">
                          View
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Athlete Overview */}
              <div className="glass-card shadow-premium rounded-2xl p-4 sm:p-6">
                <div className="mb-4 sm:mb-6 flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                  <div className="flex items-center gap-3">
                    <h2 className="text-lg font-semibold text-white">Athletes</h2>
                    <span className="rounded-full bg-white/[0.05] px-3 py-1 text-xs font-medium text-white/70">
                      {athletesWithStats?.length || 0} active
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <input
                      type="text"
                      placeholder="Search..."
                      className="w-full sm:w-48 md:w-64 rounded-lg bg-white/[0.03] px-3 py-2 text-sm text-white placeholder-white/40 border border-white/[0.08] focus:border-white/20 focus:outline-none"
                    />
                    <button className="rounded-lg bg-white/[0.05] px-3 py-2 text-xs font-medium text-white hover:bg-white/[0.08] border border-white/[0.08] transition-smooth">
                      <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                      </svg>
                    </button>
                  </div>
                </div>

                {/* Desktop Table View */}
                <div className="hidden lg:block overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b border-white/[0.08]">
                        <th className="pb-3 text-left text-xs font-medium text-white/50 uppercase tracking-wider">Athlete</th>
                        <th className="pb-3 text-left text-xs font-medium text-white/50 uppercase tracking-wider">Position</th>
                        <th className="pb-3 text-left text-xs font-medium text-white/50 uppercase tracking-wider">Current Plan</th>
                        <th className="pb-3 text-left text-xs font-medium text-white/50 uppercase tracking-wider">Completion</th>
                        <th className="pb-3 text-left text-xs font-medium text-white/50 uppercase tracking-wider">Status</th>
                        <th className="pb-3 text-right text-xs font-medium text-white/50 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-white/[0.05]">
                      {athletesWithStats?.slice(0, 10).map((athlete: any) => (
                        <tr key={athlete.id} className="group hover:bg-white/[0.02] transition-smooth">
                          <td className="py-4">
                            <div className="flex items-center gap-3">
                              <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-white/[0.05] font-semibold text-white text-sm">
                                {athlete.first_name[0]}{athlete.last_name[0]}
                              </div>
                              <div>
                                <p className="font-medium text-white text-sm">
                                  {athlete.first_name} {athlete.last_name}
                                </p>
                                <p className="text-xs text-white/50">Class of {athlete.grad_year}</p>
                              </div>
                            </div>
                          </td>
                          <td className="py-4">
                            <span className="rounded-full bg-blue-500/10 px-2.5 py-1 text-xs font-medium text-blue-400">
                              {athlete.position || 'N/A'}
                            </span>
                          </td>
                          <td className="py-4">
                            <p className="text-sm text-white/70">{athlete.planName}</p>
                          </td>
                          <td className="py-4">
                            <div className="flex items-center gap-2">
                              <div className="h-1.5 w-24 rounded-full bg-white/[0.08] overflow-hidden">
                                <div
                                  className={`h-full rounded-full ${
                                    athlete.completionRate >= 85 ? 'bg-emerald-400' :
                                    athlete.completionRate >= 70 ? 'bg-blue-400' :
                                    athlete.completionRate >= 50 ? 'bg-yellow-400' :
                                    'bg-red-400'
                                  }`}
                                  style={{ width: `${athlete.completionRate}%` }}
                                />
                              </div>
                              <span className="text-sm font-medium text-white">{athlete.completionRate}%</span>
                            </div>
                          </td>
                          <td className="py-4">
                            <span className={`rounded-full px-2.5 py-1 text-xs font-medium ${
                              athlete.status === 'excellent' ? 'bg-emerald-500/10 text-emerald-400' :
                              athlete.status === 'on-track' ? 'bg-blue-500/10 text-blue-400' :
                              athlete.status === 'attention' ? 'bg-yellow-500/10 text-yellow-400' :
                              'bg-red-500/10 text-red-400'
                            }`}>
                              {athlete.status === 'excellent' ? 'Excellent' :
                               athlete.status === 'on-track' ? 'On Track' :
                               athlete.status === 'attention' ? 'Needs Attention' :
                               'At Risk'}
                            </span>
                          </td>
                          <td className="py-4 text-right">
                            <button
                              onClick={() => alert(`View ${athlete.first_name} ${athlete.last_name} - Coming in Phase 3`)}
                              className="opacity-0 group-hover:opacity-100 rounded-lg bg-white/[0.05] px-3 py-1.5 text-xs font-medium text-white hover:bg-white/[0.08] transition-all"
                            >
                              View
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {/* Mobile Card View */}
                <div className="lg:hidden space-y-3">
                  {athletesWithStats?.slice(0, 10).map((athlete: any) => (
                    <div
                      key={athlete.id}
                      onClick={() => alert(`View ${athlete.first_name} ${athlete.last_name} - Coming in Phase 3`)}
                      className="glass-card-hover rounded-xl p-4 cursor-pointer"
                    >
                      <div className="flex items-start gap-3 mb-3">
                        <div className="flex h-12 w-12 shrink-0 items-center justify-center rounded-lg bg-white/[0.05] font-semibold text-white text-sm">
                          {athlete.first_name[0]}{athlete.last_name[0]}
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="font-medium text-white text-sm">
                            {athlete.first_name} {athlete.last_name}
                          </p>
                          <p className="text-xs text-white/50">Class of {athlete.grad_year}</p>
                          <div className="mt-1 flex items-center gap-2">
                            <span className="rounded-full bg-blue-500/10 px-2 py-0.5 text-xs font-medium text-blue-400">
                              {athlete.position || 'N/A'}
                            </span>
                            <span className={`rounded-full px-2 py-0.5 text-xs font-medium ${
                              athlete.status === 'excellent' ? 'bg-emerald-500/10 text-emerald-400' :
                              athlete.status === 'on-track' ? 'bg-blue-500/10 text-blue-400' :
                              athlete.status === 'attention' ? 'bg-yellow-500/10 text-yellow-400' :
                              'bg-red-500/10 text-red-400'
                            }`}>
                              {athlete.status === 'excellent' ? 'Excellent' :
                               athlete.status === 'on-track' ? 'On Track' :
                               athlete.status === 'attention' ? 'Attention' :
                               'At Risk'}
                            </span>
                          </div>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div>
                          <p className="text-xs text-white/50 mb-1">Current Plan</p>
                          <p className="text-sm text-white/70">{athlete.planName}</p>
                        </div>
                        <div>
                          <div className="flex items-center justify-between mb-1">
                            <p className="text-xs text-white/50">Completion Rate</p>
                            <p className="text-sm font-medium text-white">{athlete.completionRate}%</p>
                          </div>
                          <div className="h-2 rounded-full bg-white/[0.08] overflow-hidden">
                            <div
                              className={`h-full rounded-full ${
                                athlete.completionRate >= 85 ? 'bg-emerald-400' :
                                athlete.completionRate >= 70 ? 'bg-blue-400' :
                                athlete.completionRate >= 50 ? 'bg-yellow-400' :
                                'bg-red-400'
                              }`}
                              style={{ width: `${athlete.completionRate}%` }}
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {athletesWithStats && athletesWithStats.length > 10 && (
                  <div className="mt-4 flex justify-center">
                    <button className="rounded-lg bg-white/[0.05] px-4 py-2 text-sm font-medium text-white hover:bg-white/[0.08] border border-white/[0.08] transition-smooth">
                      View All {athletesWithStats.length} Athletes
                    </button>
                  </div>
                )}
              </div>

              {/* Today's Schedule */}
              <div className="glass-card shadow-premium rounded-2xl p-4 sm:p-6">
                <div className="mb-4 flex flex-col sm:flex-row sm:items-center justify-between gap-2">
                  <div className="flex items-center gap-3">
                    <h2 className="text-lg font-semibold text-white">Today's Schedule</h2>
                    <span className="rounded-full bg-blue-500/10 px-3 py-1 text-xs font-medium text-blue-400">
                      {todayWorkouts?.length || 0} workouts
                    </span>
                  </div>
                  <p className="text-xs text-white/50">
                    {new Date().toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })}
                  </p>
                </div>

                {todayWorkouts && todayWorkouts.length > 0 ? (
                  <div className="space-y-2">
                    {todayWorkouts.slice(0, 8).map((workout: any) => (
                      <div key={workout.id} className="flex items-center justify-between rounded-lg bg-white/[0.02] p-3 border border-white/[0.05] hover:border-white/[0.08] transition-smooth">
                        <div className="flex items-center gap-3">
                          <div className={`h-2 w-2 rounded-full ${
                            workout.status === 'completed' ? 'bg-emerald-400' :
                            workout.status === 'in_progress' ? 'bg-blue-400' :
                            'bg-white/30'
                          }`} />
                          <div>
                            <p className="text-sm font-medium text-white">
                              {workout.athletes?.first_name} {workout.athletes?.last_name}
                            </p>
                            <p className="text-xs text-white/50">{workout.workouts?.name || 'Workout'}</p>
                          </div>
                        </div>
                        <span className={`rounded-full px-2.5 py-1 text-xs font-medium ${
                          workout.status === 'completed' ? 'bg-emerald-500/10 text-emerald-400' :
                          workout.status === 'in_progress' ? 'bg-blue-500/10 text-blue-400' :
                          'bg-white/[0.05] text-white/60'
                        }`}>
                          {workout.status || 'pending'}
                        </span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center py-12">
                    <div className="rounded-full bg-white/[0.03] p-4">
                      <svg className="h-8 w-8 text-white/30" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <p className="mt-4 text-sm font-medium text-white/60">No workouts scheduled for today</p>
                  </div>
                )}
              </div>
            </div>

            {/* Right Column - Activity & Teams */}
            <div className="space-y-4 sm:space-y-6">
              {/* Recent Activity */}
              <div className="glass-card shadow-premium rounded-2xl p-4 sm:p-6">
                <div className="mb-4 flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-white">Recent Activity</h2>
                  <div className="h-2 w-2 rounded-full bg-emerald-400 animate-pulse" />
                </div>

                <div className="space-y-3">
                  {recentActivity && recentActivity.length > 0 ? (
                    recentActivity.slice(0, 10).map((log: any) => (
                      <div key={log.id} className="flex items-start gap-3 pb-3 border-b border-white/[0.05] last:border-0">
                        <div className="flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-[#C9A857]/10">
                          <svg className="h-4 w-4 text-[#C9A857]" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                            <path strokeLinecap="round" strokeLinejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" />
                          </svg>
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm text-white">
                            <span className="font-medium">{log.athletes?.first_name} {log.athletes?.last_name}</span>
                          </p>
                          <p className="text-xs text-white/50 truncate">
                            {log.exercises?.name} • {log.weight}lb × {log.reps}
                          </p>
                          <p className="mt-1 text-xs text-white/30">
                            {new Date(log.logged_at).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })}
                          </p>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <p className="text-sm text-white/50">No recent activity</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Programs */}
              <div className="glass-card shadow-premium rounded-2xl p-4 sm:p-6">
                <div className="mb-4 flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-white">Training Programs</h2>
                  <span className="rounded-full bg-white/[0.05] px-3 py-1 text-xs font-medium text-white/70">
                    {allPlans?.length || 0} active
                  </span>
                </div>

                <div className="space-y-2">
                  {allPlans?.slice(0, 5).map((plan: any) => (
                    <div
                      key={plan.id}
                      onClick={() => alert(`View ${plan.name} - Coming in Phase 4`)}
                      className="flex items-center justify-between rounded-lg bg-white/[0.02] p-3 border border-white/[0.05] hover:border-white/[0.08] hover:bg-white/[0.04] transition-smooth cursor-pointer"
                    >
                      <div className="flex-1">
                        <p className="text-sm font-medium text-white">{plan.name}</p>
                        <p className="text-xs text-white/50">{plan.weeks} weeks</p>
                      </div>
                      <svg className="h-4 w-4 text-white/30" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                      </svg>
                    </div>
                  ))}
                </div>
              </div>

              {/* Teams */}
              <div className="glass-card shadow-premium rounded-2xl p-4 sm:p-6">
                <div className="mb-4 flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-white">Teams</h2>
                  <span className="rounded-full bg-white/[0.05] px-3 py-1 text-xs font-medium text-white/70">
                    {teamsWithStats?.length || 0} teams
                  </span>
                </div>

                <div className="space-y-3">
                  {teamsWithStats?.map((team: any) => (
                    <div key={team.id} className="rounded-lg bg-white/[0.02] p-4 border border-white/[0.05]">
                      <div className="flex items-start justify-between mb-2">
                        <div>
                          <p className="font-medium text-white text-sm">{team.name}</p>
                          <p className="text-xs text-white/50">{team.level} • {team.sport}</p>
                        </div>
                        <span className="rounded-full bg-white/[0.05] px-2 py-1 text-xs font-medium text-white/70">
                          {team.memberCount}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="flex-1 h-1.5 rounded-full bg-white/[0.08] overflow-hidden">
                          <div
                            className={`h-full rounded-full ${
                              team.avgCompletionRate >= 85 ? 'bg-emerald-400' :
                              team.avgCompletionRate >= 70 ? 'bg-blue-400' :
                              'bg-yellow-400'
                            }`}
                            style={{ width: `${team.avgCompletionRate}%` }}
                          />
                        </div>
                        <span className="text-xs font-medium text-white">{team.avgCompletionRate}%</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}
